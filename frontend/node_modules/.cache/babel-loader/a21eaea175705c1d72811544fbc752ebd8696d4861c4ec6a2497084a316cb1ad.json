{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useQueries, useInfiniteQuery,\n// useMutation,\nuseQuery } from \"@tanstack/react-query\";\nimport { getData, getImgData } from \"./api-method\";\n// import { useState } from \"react\";\n//   //map [{url,id},{}] to {id:{data},id:{data}}\n//   //using getData each of the obejects in array\n//   //and using useQueries\nexport const useNormalQueryGet = (url, type, id) => {\n  _s();\n  const results = useQuery({\n    queryKey: [`get-${type}-${id}`],\n    queryFn: () => getData(url),\n    onSuccess: data => {\n      return data;\n    }\n  });\n  return results;\n};\n_s(useNormalQueryGet, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useQueryGetImg = (url, type, id) => {\n  _s2();\n  const results = useQuery({\n    queryKey: [`get-${type}-${id}`],\n    queryFn: () => getImgData(url),\n    // enabled: relatedTopic !== null, // Only run query if data is not null\n    onSuccess: data => {\n      return data;\n    }\n  });\n  return results;\n};\n_s2(useQueryGetImg, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useParallelData = urlArr => {\n  _s3();\n  const results = useQueries(urlArr.map((obj, i) => ({\n    queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\n    queryFn: () => getData(obj.url),\n    onSuccess: data => {\n      return data;\n    }\n    //   onSettled:\n  })));\n  return results;\n};\n\n// [\n//   {\n//     queryKey: [\"get\", \"1\", 0],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 1,\n//       title: \"Post 1\",\n//       body: \"This is the body of post 1.\"\n//     },\n//     error: null,\n//   },\n//   {\n//     queryKey: [\"get\", \"2\", 1],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 2,\n//       title: \"Post 2\",\n//       body: \"This is the body of post 2.\"\n//     },\n//     error: null,\n//   }\n// ];\n\n// Hook for handling a single infinite fetch query\n_s3(useParallelData, \"CDG7Jr26mPmL+BbaHngpjfJWF9M=\", false, function () {\n  return [useQueries];\n});\nexport const useInfiniteFetch = obj => {\n  _s4();\n  const result = useInfiniteQuery({\n    refetchOnWindowFocus: false,\n    //if false, it wont refetch when change tabs/app and come back later\n    enabled: true,\n    //if false, the query wont run\n\n    queryKey: [`infinite-${obj.id}-${obj.pageSize}`],\n    // Proper array inside the object\n\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      if (obj.url.slice(-1) === \"?\") {\n        return getData(`${obj.url}page=${pageParam}&amount=${obj.pageSize}`);\n      } else {\n        return getData(`${obj.url}&page=${pageParam}&amount=${obj.pageSize}`);\n      }\n    },\n    // Fetch function\n\n    getNextPageParam: (lastPage, allPages) => {\n      var _lastPage$data;\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : (_lastPage$data = lastPage.data) === null || _lastPage$data === void 0 ? void 0 : _lastPage$data.length) || 0;\n\n      // If data length is less than pageSize, no more pages\n      if (dataLength < obj.pageSize) {\n        return undefined;\n      }\n\n      // Otherwise, return the next page number\n      return allPages.length + 1;\n    },\n    onSuccess: data => {\n      console.log(\"Fetched data:\", data);\n    },\n    onError: data => {\n      console.log(\"Error data:\", data);\n    }\n  });\n  return result; // Return the result from the infinite query\n};\n\n// {\n//   data: {\n//     pages: [\n//       [\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\n//         // 3 more posts here (page size 5)\n//       ],\n//       [\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\n//         // 3 more posts here (page size 5)\n//       ]\n//     ]\n//   },\n//   isFetchingNextPage: false,\n//   hasNextPage: true,\n//   fetchNextPage: () => {/* Function to fetch the next page */},\n//   isSuccess: true,\n//   error: null,\n// }\n_s4(useInfiniteFetch, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});","map":{"version":3,"names":["useQueries","useInfiniteQuery","useQuery","getData","getImgData","useNormalQueryGet","url","type","id","_s","results","queryKey","queryFn","onSuccess","data","useQueryGetImg","_s2","useParallelData","urlArr","_s3","map","obj","i","useInfiniteFetch","_s4","result","refetchOnWindowFocus","enabled","pageSize","pageParam","slice","getNextPageParam","lastPage","allPages","_lastPage$data","dataLength","length","undefined","console","log","onError"],"sources":["D:/project/SE-LABS-Website/src/api/custom-hooks.js"],"sourcesContent":["import {\r\n  useQueries,\r\n  useInfiniteQuery,\r\n  // useMutation,\r\n  useQuery,\r\n} from \"@tanstack/react-query\";\r\nimport { getData, getImgData } from \"./api-method\";\r\n// import { useState } from \"react\";\r\n//   //map [{url,id},{}] to {id:{data},id:{data}}\r\n//   //using getData each of the obejects in array\r\n//   //and using useQueries\r\nexport const useNormalQueryGet = (url, type, id) => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${type}-${id}`],\r\n    queryFn: () => getData(url),\r\n    onSuccess: (data) => {\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\nexport const useQueryGetImg = (url, type, id) => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${type}-${id}`],\r\n    queryFn: () => getImgData(url),\r\n    // enabled: relatedTopic !== null, // Only run query if data is not null\r\n    onSuccess: (data) => {\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const useParallelData = (urlArr) => {\r\n  const results = useQueries(\r\n    urlArr.map((obj, i) => ({\r\n      queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\r\n      queryFn: () => getData(obj.url),\r\n      onSuccess: (data) => {\r\n        return data;\r\n      },\r\n      //   onSettled:\r\n    }))\r\n  );\r\n\r\n  return results;\r\n};\r\n\r\n// [\r\n//   {\r\n//     queryKey: [\"get\", \"1\", 0],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 1,\r\n//       title: \"Post 1\",\r\n//       body: \"This is the body of post 1.\"\r\n//     },\r\n//     error: null,\r\n//   },\r\n//   {\r\n//     queryKey: [\"get\", \"2\", 1],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 2,\r\n//       title: \"Post 2\",\r\n//       body: \"This is the body of post 2.\"\r\n//     },\r\n//     error: null,\r\n//   }\r\n// ];\r\n\r\n// Hook for handling a single infinite fetch query\r\nexport const useInfiniteFetch = (obj) => {\r\n  const result = useInfiniteQuery({\r\n    refetchOnWindowFocus: false, //if false, it wont refetch when change tabs/app and come back later\r\n    enabled: true, //if false, the query wont run\r\n\r\n    queryKey: [`infinite-${obj.id}-${obj.pageSize}`], // Proper array inside the object\r\n\r\n    queryFn: ({ pageParam = 1 }) => {\r\n      if (obj.url.slice(-1) === \"?\") {\r\n        return getData(`${obj.url}page=${pageParam}&amount=${obj.pageSize}`);\r\n      } else {\r\n        return getData(`${obj.url}&page=${pageParam}&amount=${obj.pageSize}`);\r\n      }\r\n    }, // Fetch function\r\n\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      const dataLength = lastPage?.data?.length || 0;\r\n\r\n      // If data length is less than pageSize, no more pages\r\n      if (dataLength < obj.pageSize) {\r\n        return undefined;\r\n      }\r\n\r\n      // Otherwise, return the next page number\r\n      return allPages.length + 1;\r\n    },\r\n    onSuccess: (data) => {\r\n      console.log(\"Fetched data:\", data);\r\n    },\r\n    onError: (data) => {\r\n      console.log(\"Error data:\", data);\r\n    },\r\n  });\r\n\r\n  return result; // Return the result from the infinite query\r\n};\r\n\r\n// {\r\n//   data: {\r\n//     pages: [\r\n//       [\r\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\r\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ],\r\n//       [\r\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\r\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ]\r\n//     ]\r\n//   },\r\n//   isFetchingNextPage: false,\r\n//   hasNextPage: true,\r\n//   fetchNextPage: () => {/* Function to fetch the next page */},\r\n//   isSuccess: true,\r\n//   error: null,\r\n// }\r\n"],"mappings":";;;;AAAA,SACEA,UAAU,EACVC,gBAAgB;AAChB;AACAC,QAAQ,QACH,uBAAuB;AAC9B,SAASC,OAAO,EAAEC,UAAU,QAAQ,cAAc;AAClD;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,EAAE,KAAK;EAAAC,EAAA;EAClD,MAAMC,OAAO,GAAGR,QAAQ,CAAC;IACvBS,QAAQ,EAAE,CAAC,OAAOJ,IAAI,IAAIC,EAAE,EAAE,CAAC;IAC/BI,OAAO,EAAEA,CAAA,KAAMT,OAAO,CAACG,GAAG,CAAC;IAC3BO,SAAS,EAAGC,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAACD,EAAA,CAVWJ,iBAAiB;EAAA,QACZH,QAAQ;AAAA;AAU1B,OAAO,MAAMa,cAAc,GAAGA,CAACT,GAAG,EAAEC,IAAI,EAAEC,EAAE,KAAK;EAAAQ,GAAA;EAC/C,MAAMN,OAAO,GAAGR,QAAQ,CAAC;IACvBS,QAAQ,EAAE,CAAC,OAAOJ,IAAI,IAAIC,EAAE,EAAE,CAAC;IAC/BI,OAAO,EAAEA,CAAA,KAAMR,UAAU,CAACE,GAAG,CAAC;IAC9B;IACAO,SAAS,EAAGC,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAACM,GAAA,CAXWD,cAAc;EAAA,QACTb,QAAQ;AAAA;AAY1B,OAAO,MAAMe,eAAe,GAAIC,MAAM,IAAK;EAAAC,GAAA;EACzC,MAAMT,OAAO,GAAGV,UAAU,CACxBkB,MAAM,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,MAAM;IACtBX,QAAQ,EAAE,CAAC,GAAG,MAAM,GAAGU,GAAG,CAACb,EAAE,GAAG,GAAG,GAAGc,CAAC,EAAE,CAAC;IAC1CV,OAAO,EAAEA,CAAA,KAAMT,OAAO,CAACkB,GAAG,CAACf,GAAG,CAAC;IAC/BO,SAAS,EAAGC,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb;IACA;EACF,CAAC,CAAC,CACJ,CAAC;EAED,OAAOJ,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAS,GAAA,CAxCaF,eAAe;EAAA,QACVjB,UAAU;AAAA;AAwC5B,OAAO,MAAMuB,gBAAgB,GAAIF,GAAG,IAAK;EAAAG,GAAA;EACvC,MAAMC,MAAM,GAAGxB,gBAAgB,CAAC;IAC9ByB,oBAAoB,EAAE,KAAK;IAAE;IAC7BC,OAAO,EAAE,IAAI;IAAE;;IAEfhB,QAAQ,EAAE,CAAC,YAAYU,GAAG,CAACb,EAAE,IAAIa,GAAG,CAACO,QAAQ,EAAE,CAAC;IAAE;;IAElDhB,OAAO,EAAEA,CAAC;MAAEiB,SAAS,GAAG;IAAE,CAAC,KAAK;MAC9B,IAAIR,GAAG,CAACf,GAAG,CAACwB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7B,OAAO3B,OAAO,CAAC,GAAGkB,GAAG,CAACf,GAAG,QAAQuB,SAAS,WAAWR,GAAG,CAACO,QAAQ,EAAE,CAAC;MACtE,CAAC,MAAM;QACL,OAAOzB,OAAO,CAAC,GAAGkB,GAAG,CAACf,GAAG,SAASuB,SAAS,WAAWR,GAAG,CAACO,QAAQ,EAAE,CAAC;MACvE;IACF,CAAC;IAAE;;IAEHG,gBAAgB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MAAA,IAAAC,cAAA;MACxC,MAAMC,UAAU,GAAG,CAAAH,QAAQ,aAARA,QAAQ,wBAAAE,cAAA,GAARF,QAAQ,CAAElB,IAAI,cAAAoB,cAAA,uBAAdA,cAAA,CAAgBE,MAAM,KAAI,CAAC;;MAE9C;MACA,IAAID,UAAU,GAAGd,GAAG,CAACO,QAAQ,EAAE;QAC7B,OAAOS,SAAS;MAClB;;MAEA;MACA,OAAOJ,QAAQ,CAACG,MAAM,GAAG,CAAC;IAC5B,CAAC;IACDvB,SAAS,EAAGC,IAAI,IAAK;MACnBwB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEzB,IAAI,CAAC;IACpC,CAAC;IACD0B,OAAO,EAAG1B,IAAI,IAAK;MACjBwB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEzB,IAAI,CAAC;IAClC;EACF,CAAC,CAAC;EAEF,OAAOW,MAAM,CAAC,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAD,GAAA,CAzDaD,gBAAgB;EAAA,QACZtB,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}