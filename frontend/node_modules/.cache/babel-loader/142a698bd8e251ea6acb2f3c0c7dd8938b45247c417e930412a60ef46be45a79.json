{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useQueries, useInfiniteQuery\n// useMutation,\n// useQuery,\n} from \"@tanstack/react-query\";\nimport { getData } from \"./api-method\";\n// import { useState } from \"react\";\n//   //map [{url,id},{}] to {id:{data},id:{data}}\n//   //using getData each of the obejects in array\n//   //and using useQueries\nexport const useParallelData = urlArr => {\n  _s();\n  const results = useQueries(urlArr.map((obj, i) => ({\n    queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\n    queryFn: () => getData(obj.url),\n    onSuccess: data => {\n      return data;\n    }\n    //   onSettled:\n  })));\n  return results;\n};\n\n// [\n//   {\n//     queryKey: [\"get\", \"1\", 0],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 1,\n//       title: \"Post 1\",\n//       body: \"This is the body of post 1.\"\n//     },\n//     error: null,\n//   },\n//   {\n//     queryKey: [\"get\", \"2\", 1],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 2,\n//       title: \"Post 2\",\n//       body: \"This is the body of post 2.\"\n//     },\n//     error: null,\n//   }\n// ];\n\n// Hook for handling a single infinite fetch query\n_s(useParallelData, \"CDG7Jr26mPmL+BbaHngpjfJWF9M=\", false, function () {\n  return [useQueries];\n});\nexport const useInfiniteFetch = obj => {\n  _s2();\n  const result = useInfiniteQuery({\n    refetchOnWindowFocus: false,\n    //if false, it wont refetch when change tabs/app and come back later\n    enabled: true,\n    //if false, the query wont run\n\n    queryKey: [`infinite-${obj.id}`],\n    // Proper array inside the object\n    queryFn: ({\n      pageParam = 1\n    }) => getData(`${obj.url}&page=${pageParam}&amount=${obj.pageSize}`),\n    // Fetch function\n\n    getNextPageParam: (lastPage, allPages) => {\n      var _lastPage$data;\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : (_lastPage$data = lastPage.data) === null || _lastPage$data === void 0 ? void 0 : _lastPage$data.length) || 0;\n\n      // If data length is less than pageSize, no more pages\n      if (dataLength < obj.pageSize) {\n        return undefined;\n      }\n\n      // Otherwise, return the next page number\n      return allPages.length + 1;\n    },\n    onSuccess: data => {\n      console.log(\"Fetched data:\", data);\n    }\n  });\n  return result; // Return the result from the infinite query\n};\n\n// {\n//   data: {\n//     pages: [\n//       [\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\n//         // 3 more posts here (page size 5)\n//       ],\n//       [\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\n//         // 3 more posts here (page size 5)\n//       ]\n//     ]\n//   },\n//   isFetchingNextPage: false,\n//   hasNextPage: true,\n//   fetchNextPage: () => {/* Function to fetch the next page */},\n//   isSuccess: true,\n//   error: null,\n// }\n_s2(useInfiniteFetch, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});","map":{"version":3,"names":["useQueries","useInfiniteQuery","getData","useParallelData","urlArr","_s","results","map","obj","i","queryKey","id","queryFn","url","onSuccess","data","useInfiniteFetch","_s2","result","refetchOnWindowFocus","enabled","pageParam","pageSize","getNextPageParam","lastPage","allPages","_lastPage$data","dataLength","length","undefined","console","log"],"sources":["D:/project/SE-LABS-Website/src/api/custom-hooks.js"],"sourcesContent":["import {\r\n    useQueries,\r\n    useInfiniteQuery,\r\n    // useMutation,\r\n    // useQuery,\r\n} from \"@tanstack/react-query\";\r\nimport { getData } from \"./api-method\";\r\n// import { useState } from \"react\";\r\n//   //map [{url,id},{}] to {id:{data},id:{data}}\r\n//   //using getData each of the obejects in array\r\n//   //and using useQueries\r\nexport const useParallelData = (urlArr) => {\r\n    const results = useQueries(\r\n        urlArr.map((obj, i) => ({\r\n            queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\r\n            queryFn: () => getData(obj.url),\r\n            onSuccess: (data) => {\r\n                return data;\r\n            },\r\n            //   onSettled:\r\n        }))\r\n    );\r\n\r\n    return results;\r\n};\r\n\r\n// [\r\n//   {\r\n//     queryKey: [\"get\", \"1\", 0],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 1,\r\n//       title: \"Post 1\",\r\n//       body: \"This is the body of post 1.\"\r\n//     },\r\n//     error: null,\r\n//   },\r\n//   {\r\n//     queryKey: [\"get\", \"2\", 1],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 2,\r\n//       title: \"Post 2\",\r\n//       body: \"This is the body of post 2.\"\r\n//     },\r\n//     error: null,\r\n//   }\r\n// ];\r\n\r\n// Hook for handling a single infinite fetch query\r\nexport const useInfiniteFetch = (obj) => {\r\n    const result = useInfiniteQuery({\r\n        refetchOnWindowFocus: false, //if false, it wont refetch when change tabs/app and come back later\r\n        enabled: true, //if false, the query wont run\r\n\r\n        queryKey: [`infinite-${obj.id}`], // Proper array inside the object\r\n        queryFn: ({ pageParam = 1 }) =>\r\n            getData(`${obj.url}&page=${pageParam}&amount=${obj.pageSize}`), // Fetch function\r\n\r\n        getNextPageParam: (lastPage, allPages) => {\r\n            const dataLength = lastPage?.data?.length || 0;\r\n\r\n            // If data length is less than pageSize, no more pages\r\n            if (dataLength < obj.pageSize) {\r\n                return undefined;\r\n            }\r\n\r\n            // Otherwise, return the next page number\r\n            return allPages.length + 1;\r\n        },\r\n        onSuccess: (data) => {\r\n            console.log(\"Fetched data:\", data);\r\n        },\r\n    });\r\n\r\n    return result; // Return the result from the infinite query\r\n};\r\n\r\n// {\r\n//   data: {\r\n//     pages: [\r\n//       [\r\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\r\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ],\r\n//       [\r\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\r\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ]\r\n//     ]\r\n//   },\r\n//   isFetchingNextPage: false,\r\n//   hasNextPage: true,\r\n//   fetchNextPage: () => {/* Function to fetch the next page */},\r\n//   isSuccess: true,\r\n//   error: null,\r\n// }\r\n"],"mappings":";;AAAA,SACIA,UAAU,EACVC;AACA;AACA;AAAA,OACG,uBAAuB;AAC9B,SAASC,OAAO,QAAQ,cAAc;AACtC;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAAAC,EAAA;EACvC,MAAMC,OAAO,GAAGN,UAAU,CACtBI,MAAM,CAACG,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,MAAM;IACpBC,QAAQ,EAAE,CAAC,GAAG,MAAM,GAAGF,GAAG,CAACG,EAAE,GAAG,GAAG,GAAGF,CAAC,EAAE,CAAC;IAC1CG,OAAO,EAAEA,CAAA,KAAMV,OAAO,CAACM,GAAG,CAACK,GAAG,CAAC;IAC/BC,SAAS,EAAGC,IAAI,IAAK;MACjB,OAAOA,IAAI;IACf;IACA;EACJ,CAAC,CAAC,CACN,CAAC;EAED,OAAOT,OAAO;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAD,EAAA,CAxCaF,eAAe;EAAA,QACRH,UAAU;AAAA;AAwC9B,OAAO,MAAMgB,gBAAgB,GAAIR,GAAG,IAAK;EAAAS,GAAA;EACrC,MAAMC,MAAM,GAAGjB,gBAAgB,CAAC;IAC5BkB,oBAAoB,EAAE,KAAK;IAAE;IAC7BC,OAAO,EAAE,IAAI;IAAE;;IAEfV,QAAQ,EAAE,CAAC,YAAYF,GAAG,CAACG,EAAE,EAAE,CAAC;IAAE;IAClCC,OAAO,EAAEA,CAAC;MAAES,SAAS,GAAG;IAAE,CAAC,KACvBnB,OAAO,CAAC,GAAGM,GAAG,CAACK,GAAG,SAASQ,SAAS,WAAWb,GAAG,CAACc,QAAQ,EAAE,CAAC;IAAE;;IAEpEC,gBAAgB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MAAA,IAAAC,cAAA;MACtC,MAAMC,UAAU,GAAG,CAAAH,QAAQ,aAARA,QAAQ,wBAAAE,cAAA,GAARF,QAAQ,CAAET,IAAI,cAAAW,cAAA,uBAAdA,cAAA,CAAgBE,MAAM,KAAI,CAAC;;MAE9C;MACA,IAAID,UAAU,GAAGnB,GAAG,CAACc,QAAQ,EAAE;QAC3B,OAAOO,SAAS;MACpB;;MAEA;MACA,OAAOJ,QAAQ,CAACG,MAAM,GAAG,CAAC;IAC9B,CAAC;IACDd,SAAS,EAAGC,IAAI,IAAK;MACjBe,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEhB,IAAI,CAAC;IACtC;EACJ,CAAC,CAAC;EAEF,OAAOG,MAAM,CAAC,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAD,GAAA,CAhDaD,gBAAgB;EAAA,QACVf,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}