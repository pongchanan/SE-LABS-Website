{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\SE-LABS-Website\\\\frontend\\\\src\\\\index.js\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index.js\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60,\n      // Data is fresh for 1 minute\n      cacheTime: 1000 * 60 * 5,\n      // Cache remains for 5 minutes\n      refetchOnWindowFocus: false,\n      // Disable refetch on window focus\n      refetchOnMount: false,\n      // Disable refetch on mount\n      refetchOnReconnect: true,\n      // Refetch on reconnect (default)\n      retry: 2,\n      // Retry failed requests up to 2 times\n      retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000) // Exponential backoff\n    },\n    mutations: {\n      retry: 1 // Retry failed mutations once\n    }\n  }\n});\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n    client: queryClient,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 29,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["App","reportWebVitals","Provider","store","QueryClient","QueryClientProvider","React","ReactDOM","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","queryClient","defaultOptions","queries","staleTime","cacheTime","refetchOnWindowFocus","refetchOnMount","refetchOnReconnect","retry","retryDelay","attemptIndex","Math","min","mutations","render","StrictMode","children","client","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/project/SE-LABS-Website/frontend/src/index.js"],"sourcesContent":["import \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index.js\";\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom/client\";\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 1000 * 60, // Data is fresh for 1 minute\r\n      cacheTime: 1000 * 60 * 5, // Cache remains for 5 minutes\r\n      refetchOnWindowFocus: false, // Disable refetch on window focus\r\n      refetchOnMount: false, // Disable refetch on mount\r\n      refetchOnReconnect: true, // Refetch on reconnect (default)\r\n      retry: 2, // Retry failed requests up to 2 times\r\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\r\n    },\r\n    mutations: {\r\n      retry: 1, // Retry failed mutations once\r\n    },\r\n  },\r\n});\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </QueryClientProvider>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"mappings":";AAAA,OAAO,aAAa;AACpB,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AAExE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC7C,MAAMC,IAAI,GAAGH,QAAQ,CAACI,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjE,MAAMC,WAAW,GAAG,IAAIV,WAAW,CAAC;EAClCW,cAAc,EAAE;IACdC,OAAO,EAAE;MACPC,SAAS,EAAE,IAAI,GAAG,EAAE;MAAE;MACtBC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;MAAE;MAC1BC,oBAAoB,EAAE,KAAK;MAAE;MAC7BC,cAAc,EAAE,KAAK;MAAE;MACvBC,kBAAkB,EAAE,IAAI;MAAE;MAC1BC,KAAK,EAAE,CAAC;MAAE;MACVC,UAAU,EAAGC,YAAY,IAAKC,IAAI,CAACC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAIF,YAAY,EAAE,KAAK,CAAC,CAAE;IAC3E,CAAC;IACDG,SAAS,EAAE;MACTL,KAAK,EAAE,CAAC,CAAE;IACZ;EACF;AACF,CAAC,CAAC;AAEFZ,IAAI,CAACkB,MAAM,cACTnB,OAAA,CAACH,KAAK,CAACuB,UAAU;EAAAC,QAAA,eACfrB,OAAA,CAACJ,mBAAmB;IAAC0B,MAAM,EAAEjB,WAAY;IAAAgB,QAAA,eACvCrB,OAAA,CAACP,QAAQ;MAACC,KAAK,EAAEA,KAAM;MAAA2B,QAAA,eACrBrB,OAAA,CAACT,GAAG;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACN,CACpB,CAAC;;AAED;AACA;AACA;AACAlC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}