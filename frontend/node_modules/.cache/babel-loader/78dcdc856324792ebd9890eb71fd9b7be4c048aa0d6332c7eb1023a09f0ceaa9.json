{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { useQueries, useInfiniteQuery,\n// useMutation,\nuseQuery } from \"@tanstack/react-query\";\nimport { getData, getImgData } from \"./api-method\";\n// import { useState } from \"react\";\n//   //map [{url,id},{}] to {id:{data},id:{data}}\n//   //using getData each of the obejects in array\n//   //and using useQueries\nexport const useNormalQueryGet = (url, type, id = \"\") => {\n  _s();\n  const results = useQuery({\n    queryKey: [`get-${type}-${id}`],\n    queryFn: () => getData(url),\n    onSuccess: data => {\n      return data;\n    }\n  });\n  return results;\n};\n_s(useNormalQueryGet, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useQueryGetImg = (url, type, id) => {\n  _s2();\n  const results = useQuery({\n    queryKey: [`get-${type}-${id}`],\n    staleTime: 1000 * 60,\n    // Data stays fresh for 1 minute\n    cacheTime: 1000 * 60 * 5,\n    // Cache remains for 5 minutes\n\n    queryFn: () => {\n      const type2 = type.toLowerCase();\n      return getImgData(`${url}/${type2}/image-high?${type2}_id=${id}`);\n    },\n    // enabled: relatedTopic !== null, // Only run query if data is not null\n    onSuccess: data => {\n      console.log(\"fetched img\", url, type);\n      return data;\n    }\n  });\n  return results;\n};\n_s2(useQueryGetImg, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useParallelData = urlArr => {\n  _s3();\n  const results = useQueries(urlArr.map((obj, i) => ({\n    queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\n    queryFn: () => getData(obj.url),\n    onSuccess: data => {\n      console.log(\"fetched par data\", urlArr[1]);\n      return data;\n    }\n    //   onSettled:\n  })));\n  return results;\n};\n\n// [\n//   {\n//     queryKey: [\"get\", \"1\", 0],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 1,\n//       title: \"Post 1\",\n//       body: \"This is the body of post 1.\"\n//     },\n//     error: null,\n//   },\n//   {\n//     queryKey: [\"get\", \"2\", 1],\n//     isLoading: false,\n//     isSuccess: true,\n//     data: {\n//       id: 2,\n//       title: \"Post 2\",\n//       body: \"This is the body of post 2.\"\n//     },\n//     error: null,\n//   }\n// ];\n\n// Hook for handling a single infinite fetch query\n_s3(useParallelData, \"CDG7Jr26mPmL+BbaHngpjfJWF9M=\", false, function () {\n  return [useQueries];\n});\nexport const useInfiniteFetch = obj => {\n  _s4();\n  const result = useInfiniteQuery({\n    queryKey: [`infinite-${obj.id}-${obj.pageSize}`, JSON.stringify(obj.filter)],\n    // Include filter in key\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      let url = obj.url;\n\n      // Handle query params dynamically\n      const params = new URLSearchParams();\n      params.append(\"page\", pageParam);\n      params.append(\"amount\", obj.pageSize);\n      if (obj.filter) {\n        Object.entries(obj.filter).forEach(([key, value]) => {\n          params.append(key, value);\n        });\n      }\n\n      // Append serialized params to the URL\n      if (url.slice(-1) === \"?\") {\n        url += params.toString();\n      } else {\n        url += `&${params.toString()}`;\n      }\n      console.log(\"Fetching URL:\", url); // Debugging URL\n      return getData(url); // Perform the fetch\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      // Adjust based on your API's response structure\n      // console.log(\"lastpage=\", lastPage);\n      // console.log(\"alloage=\", allPages);\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : lastPage.length) || 0;\n      if (dataLength < obj.pageSize) {\n        // console.log(\"data;ennght\", dataLength);\n        // console.log(\"no more page\");\n        return undefined;\n      } // No more pages\n      return allPages.length + 1; // Increment page\n    },\n    enabled: true,\n    // Ensure it's enabled\n    refetchOnWindowFocus: false,\n    // Avoid refetch on tab switch\n    onSuccess: data => console.log(\"Fetched data:\", data),\n    onError: error => console.error(\"Error fetching data:\", error)\n  });\n\n  // console.log(\"Infinite Query Result:\", result);\n  return result; // Return the infinite query result\n};\n_s4(useInfiniteFetch, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});\nexport const useInfiniteFetchFilter = obj => {\n  _s5();\n  const result = useInfiniteQuery({\n    queryKey: [`infinite-${obj.id}-${obj.pageSize}`, JSON.stringify(obj.filter)],\n    // Include filter in key\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      let url = obj.url;\n      // Handle query params dynamically\n      const params = new URLSearchParams();\n      params.append(\"page\", pageParam);\n      params.append(\"amount\", obj.pageSize);\n      if (obj.filter) {\n        Object.entries(obj.filter).forEach(([key, value]) => {\n          params.append(key, value);\n        });\n      }\n\n      // Append serialized params to the URL\n      if (url.slice(-1) === \"?\") {\n        url += params.toString();\n      } else {\n        url += `&${params.toString()}`;\n      }\n      console.log(\"Fetching URL:\", url); // Debugging URL\n      return getData(url); // Perform the fetch\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      // Adjust based on your API's response structure\n      // console.log(\"lastpage=\", lastPage);\n      // console.log(\"alloage=\", allPages);\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : lastPage.length) || 0;\n      if (dataLength < obj.pageSize) {\n        // console.log(\"data;ennght\", dataLength);\n        // console.log(\"no more page\");\n        return undefined;\n      } // No more pages\n      return allPages.length + 1; // Increment page\n    },\n    enabled: true,\n    // Ensure it's enabled\n    refetchOnWindowFocus: false,\n    // Avoid refetch on tab switch\n    onSuccess: data => console.log(\"Fetched data:\", data),\n    onError: error => console.error(\"Error fetching data:\", error)\n  });\n\n  // console.log(\"Infinite Query Result:\", result);\n  return result; // Return the infinite query result\n};\n\n// {\n//   data: {\n//     pages: [\n//       [\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\n//         // 3 more posts here (page size 5)\n//       ],\n//       [\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\n//         // 3 more posts here (page size 5)\n//       ]\n//     ]\n//   },\n//   isFetchingNextPage: false,\n//   hasNextPage: true,\n//   fetchNextPage: () => {/* Function to fetch the next page */},\n//   isSuccess: true,\n//   error: null,\n// }\n_s5(useInfiniteFetchFilter, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});","map":{"version":3,"names":["useQueries","useInfiniteQuery","useQuery","getData","getImgData","useNormalQueryGet","url","type","id","_s","results","queryKey","queryFn","onSuccess","data","useQueryGetImg","_s2","staleTime","cacheTime","type2","toLowerCase","console","log","useParallelData","urlArr","_s3","map","obj","i","useInfiniteFetch","_s4","result","pageSize","JSON","stringify","filter","pageParam","params","URLSearchParams","append","Object","entries","forEach","key","value","slice","toString","getNextPageParam","lastPage","allPages","dataLength","length","undefined","enabled","refetchOnWindowFocus","onError","error","useInfiniteFetchFilter","_s5"],"sources":["D:/project/SE-LABS-Website/src/api/custom-hooks.js"],"sourcesContent":["import {\r\n  useQueries,\r\n  useInfiniteQuery,\r\n  // useMutation,\r\n  useQuery,\r\n} from \"@tanstack/react-query\";\r\nimport { getData, getImgData } from \"./api-method\";\r\n// import { useState } from \"react\";\r\n//   //map [{url,id},{}] to {id:{data},id:{data}}\r\n//   //using getData each of the obejects in array\r\n//   //and using useQueries\r\nexport const useNormalQueryGet = (url, type, id = \"\") => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${type}-${id}`],\r\n    queryFn: () => getData(url),\r\n    onSuccess: (data) => {\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\nexport const useQueryGetImg = (url, type, id) => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${type}-${id}`],\r\n    staleTime: 1000 * 60, // Data stays fresh for 1 minute\r\n    cacheTime: 1000 * 60 * 5, // Cache remains for 5 minutes\r\n\r\n    queryFn: () => {\r\n      const type2 = type.toLowerCase();\r\n      return getImgData(`${url}/${type2}/image-high?${type2}_id=${id}`);\r\n    },\r\n    // enabled: relatedTopic !== null, // Only run query if data is not null\r\n    onSuccess: (data) => {\r\n      console.log(\"fetched img\", url, type);\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const useParallelData = (urlArr) => {\r\n  const results = useQueries(\r\n    urlArr.map((obj, i) => ({\r\n      queryKey: [`${\"get-\" + obj.id + \"-\" + i}`],\r\n      queryFn: () => getData(obj.url),\r\n      onSuccess: (data) => {\r\n        console.log(\"fetched par data\", urlArr[1]);\r\n\r\n        return data;\r\n      },\r\n      //   onSettled:\r\n    }))\r\n  );\r\n\r\n  return results;\r\n};\r\n\r\n// [\r\n//   {\r\n//     queryKey: [\"get\", \"1\", 0],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 1,\r\n//       title: \"Post 1\",\r\n//       body: \"This is the body of post 1.\"\r\n//     },\r\n//     error: null,\r\n//   },\r\n//   {\r\n//     queryKey: [\"get\", \"2\", 1],\r\n//     isLoading: false,\r\n//     isSuccess: true,\r\n//     data: {\r\n//       id: 2,\r\n//       title: \"Post 2\",\r\n//       body: \"This is the body of post 2.\"\r\n//     },\r\n//     error: null,\r\n//   }\r\n// ];\r\n\r\n// Hook for handling a single infinite fetch query\r\nexport const useInfiniteFetch = (obj) => {\r\n  const result = useInfiniteQuery({\r\n    queryKey: [\r\n      `infinite-${obj.id}-${obj.pageSize}`,\r\n      JSON.stringify(obj.filter),\r\n    ],\r\n    // Include filter in key\r\n    queryFn: ({ pageParam = 1 }) => {\r\n      let url = obj.url;\r\n\r\n      // Handle query params dynamically\r\n      const params = new URLSearchParams();\r\n      params.append(\"page\", pageParam);\r\n      params.append(\"amount\", obj.pageSize);\r\n\r\n      if (obj.filter) {\r\n        Object.entries(obj.filter).forEach(([key, value]) => {\r\n          params.append(key, value);\r\n        });\r\n      }\r\n\r\n      // Append serialized params to the URL\r\n      if (url.slice(-1) === \"?\") {\r\n        url += params.toString();\r\n      } else {\r\n        url += `&${params.toString()}`;\r\n      }\r\n\r\n      console.log(\"Fetching URL:\", url); // Debugging URL\r\n      return getData(url); // Perform the fetch\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      // Adjust based on your API's response structure\r\n      // console.log(\"lastpage=\", lastPage);\r\n      // console.log(\"alloage=\", allPages);\r\n      const dataLength = lastPage?.length || 0;\r\n      if (dataLength < obj.pageSize) {\r\n        // console.log(\"data;ennght\", dataLength);\r\n        // console.log(\"no more page\");\r\n        return undefined;\r\n      } // No more pages\r\n      return allPages.length + 1; // Increment page\r\n    },\r\n    enabled: true, // Ensure it's enabled\r\n    refetchOnWindowFocus: false, // Avoid refetch on tab switch\r\n    onSuccess: (data) => console.log(\"Fetched data:\", data),\r\n    onError: (error) => console.error(\"Error fetching data:\", error),\r\n  });\r\n\r\n  // console.log(\"Infinite Query Result:\", result);\r\n  return result; // Return the infinite query result\r\n};\r\nexport const useInfiniteFetchFilter = (obj) => {\r\n  const result = useInfiniteQuery({\r\n    queryKey: [\r\n      `infinite-${obj.id}-${obj.pageSize}`,\r\n      JSON.stringify(obj.filter),\r\n    ],\r\n    // Include filter in key\r\n    queryFn: ({ pageParam = 1 }) => {\r\n      let url = obj.url;\r\n      // Handle query params dynamically\r\n      const params = new URLSearchParams();\r\n      params.append(\"page\", pageParam);\r\n      params.append(\"amount\", obj.pageSize);\r\n\r\n      if (obj.filter) {\r\n        Object.entries(obj.filter).forEach(([key, value]) => {\r\n          params.append(key, value);\r\n        });\r\n      }\r\n\r\n      // Append serialized params to the URL\r\n      if (url.slice(-1) === \"?\") {\r\n        url += params.toString();\r\n      } else {\r\n        url += `&${params.toString()}`;\r\n      }\r\n\r\n      console.log(\"Fetching URL:\", url); // Debugging URL\r\n      return getData(url); // Perform the fetch\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      // Adjust based on your API's response structure\r\n      // console.log(\"lastpage=\", lastPage);\r\n      // console.log(\"alloage=\", allPages);\r\n      const dataLength = lastPage?.length || 0;\r\n      if (dataLength < obj.pageSize) {\r\n        // console.log(\"data;ennght\", dataLength);\r\n        // console.log(\"no more page\");\r\n        return undefined;\r\n      } // No more pages\r\n      return allPages.length + 1; // Increment page\r\n    },\r\n    enabled: true, // Ensure it's enabled\r\n    refetchOnWindowFocus: false, // Avoid refetch on tab switch\r\n    onSuccess: (data) => console.log(\"Fetched data:\", data),\r\n    onError: (error) => console.error(\"Error fetching data:\", error),\r\n  });\r\n\r\n  // console.log(\"Infinite Query Result:\", result);\r\n  return result; // Return the infinite query result\r\n};\r\n\r\n// {\r\n//   data: {\r\n//     pages: [\r\n//       [\r\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\r\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ],\r\n//       [\r\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\r\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ]\r\n//     ]\r\n//   },\r\n//   isFetchingNextPage: false,\r\n//   hasNextPage: true,\r\n//   fetchNextPage: () => {/* Function to fetch the next page */},\r\n//   isSuccess: true,\r\n//   error: null,\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}