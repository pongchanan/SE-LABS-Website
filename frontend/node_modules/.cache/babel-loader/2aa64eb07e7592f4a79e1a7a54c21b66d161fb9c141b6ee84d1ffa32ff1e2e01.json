{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { useQueries, useInfiniteQuery,\n// useMutation,\nuseQuery, useMutation } from \"@tanstack/react-query\";\nimport { fetchUserDetails, getData, getImgData } from \"./api-method\";\nimport { useState, useEffect } from \"react\";\nimport { getDataDynamic } from \"api/api-method\";\n\n// import { useState } from \"react\";\n//   //map [{url,id},{}] to {id:{data},id:{data}}\n//   //using getData each of the obejects in array\n//   //and using useQueries\nexport const useNormalQueryGet = (url, type, id = \"\") => {\n  _s();\n  const results = useQuery({\n    queryKey: [`get-${url}-${type}-${id}`],\n    queryFn: () => {\n      return getData(url);\n    },\n    onSuccess: data => {\n      return data;\n    }\n  });\n  return results;\n};\n_s(useNormalQueryGet, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useQueryGetImg = (url, type, id) => {\n  _s2();\n  const results = useQuery({\n    queryKey: [`get-${url}-${type}-${id}`],\n    staleTime: 1000 * 60,\n    // Data stays fresh for 1 minute\n    cacheTime: 1000 * 60 * 5,\n    // Cache remains for 5 minutes\n\n    queryFn: () => {\n      const type2 = type.toLowerCase();\n      return getImgData(`${url}/${type2}/image-high?${type2}_id=${id}`);\n    },\n    // enabled: relatedTopic !== null, // Only run query if data is not null\n    onSuccess: data => {\n      console.log(\"fetched img\", url, type);\n      return data;\n    }\n  });\n  return results;\n};\n_s2(useQueryGetImg, \"Waz4QfO3AJEq1S2ItFOtkrtjg1U=\", false, function () {\n  return [useQuery];\n});\nexport const useParallelData = urlArr => {\n  _s3();\n  const results = useQueries(urlArr.map((obj, i) => ({\n    queryKey: [`${\"get-\" + obj.url + \"-\" + obj.id + \"-\" + i}`],\n    queryFn: () => getData(obj.url),\n    onSuccess: data => {\n      console.log(\"fetched par data\", urlArr[1]);\n      return data;\n    }\n    //   onSettled:\n  })));\n  return results;\n};\n_s3(useParallelData, \"CDG7Jr26mPmL+BbaHngpjfJWF9M=\", false, function () {\n  return [useQueries];\n});\nexport const useGetData = (url, token = null) => {\n  _s4();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Call the utility function with or without the token\n        const response = await getDataDynamic(url, token ? `Bearer ${token}` : null);\n        setData(response);\n      } catch (err) {\n        setError(err.message || \"Error fetching data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url, token]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s4(useGetData, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\nexport const useAutoLogin = () => {\n  _s5();\n  return useMutation({\n    mutationFn: fetchUserDetails,\n    // The function to call\n    onSuccess: data => {\n      console.log(\"Auto login successful:\", data);\n    },\n    onError: error => {\n      console.error(\"Error logging in:\", error);\n    }\n  });\n};\n// Hook for handling a single infinite fetch query\n_s5(useAutoLogin, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [useMutation];\n});\nexport const useInfiniteFetch = obj => {\n  _s6();\n  const result = useInfiniteQuery({\n    queryKey: [`infinite-${obj.id}-${obj.pageSize}`, JSON.stringify(obj.filter)],\n    // Include filter in key\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      let url = obj.url;\n\n      // Handle query params dynamically\n      const params = new URLSearchParams();\n      params.append(\"page\", pageParam);\n      params.append(\"amount\", obj.pageSize);\n      if (obj.filter) {\n        Object.entries(obj.filter).forEach(([key, value]) => {\n          params.append(key, value);\n        });\n      }\n\n      // Append serialized params to the URL\n      if (url.slice(-1) === \"?\") {\n        url += params.toString();\n      } else {\n        url += `&${params.toString()}`;\n      }\n      console.log(\"Fetching URL:\", url); // Debugging URL\n      return getData(url); // Perform the fetch\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      // Adjust based on your API's response structure\n      // console.log(\"lastpage=\", lastPage);\n      // console.log(\"alloage=\", allPages);\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : lastPage.length) || 0;\n      if (dataLength < obj.pageSize) {\n        // console.log(\"data;ennght\", dataLength);\n        // console.log(\"no more page\");\n        return undefined;\n      } // No more pages\n      return allPages.length + 1; // Increment page\n    },\n    enabled: true,\n    // Ensure it's enabled\n    refetchOnWindowFocus: false,\n    // Avoid refetch on tab switch\n    onSuccess: data => console.log(\"Fetched data:\", data),\n    onError: error => console.error(\"Error fetching data:\", error)\n  });\n\n  // console.log(\"Infinite Query Result:\", result);\n  return result; // Return the infinite query result\n};\n_s6(useInfiniteFetch, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});\nexport const useInfiniteFetchCommit = obj => {\n  _s7();\n  const result = useInfiniteQuery({\n    queryKey: [`infiniteCommit-${obj.id}-${obj.pageSize}`, JSON.stringify(obj.filter)],\n    // Include filter in key\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      let url = obj.url;\n      // Handle query params dynamically\n      const params = new URLSearchParams();\n      params.append(\"page\", pageParam);\n      params.append(\"amount\", obj.pageSize);\n      if (obj.filter) {\n        Object.entries(obj.filter).forEach(([key, value]) => {\n          params.append(key, value);\n        });\n      }\n\n      // Append serialized params to the URL\n      if (url.slice(-1) === \"?\") {\n        url += params.toString();\n      } else {\n        url += `&${params.toString()}`;\n      }\n      console.log(\"Fetching URL:\", url); // Debugging URL\n      return getDataDynamic(url, obj.token); // Perform the fetch\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      // Adjust based on your API's response structure\n      // console.log(\"lastpage=\", lastPage);\n      // console.log(\"alloage=\", allPages);\n      const dataLength = (lastPage === null || lastPage === void 0 ? void 0 : lastPage.length) || 0;\n      if (dataLength < obj.pageSize) {\n        // console.log(\"data;ennght\", dataLength);\n        // console.log(\"no more page\");\n        return undefined;\n      } // No more pages\n      return allPages.length + 1; // Increment page\n    },\n    enabled: true,\n    // Ensure it's enabled\n    refetchOnWindowFocus: false,\n    // Avoid refetch on tab switch\n    onSuccess: data => console.log(\"Fetched data:\", data),\n    onError: error => console.error(\"Error fetching data:\", error)\n  });\n\n  // console.log(\"Infinite Query Result:\", result);\n  return result; // Return the infinite query result\n};\n\n// {\n//   data: {\n//     pages: [\n//       [\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\n//         // 3 more posts here (page size 5)\n//       ],\n//       [\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\n//         // 3 more posts here (page size 5)\n//       ]\n//     ]\n//   },\n//   isFetchingNextPage: false,\n//   hasNextPage: true,\n//   fetchNextPage: () => {/* Function to fetch the next page */},\n//   isSuccess: true,\n//   error: null,\n// }\n_s7(useInfiniteFetchCommit, \"j9XoyuX68Zdqu2/tR2DPR8gVCaI=\", false, function () {\n  return [useInfiniteQuery];\n});","map":{"version":3,"names":["useQueries","useInfiniteQuery","useQuery","useMutation","fetchUserDetails","getData","getImgData","useState","useEffect","getDataDynamic","useNormalQueryGet","url","type","id","_s","results","queryKey","queryFn","onSuccess","data","useQueryGetImg","_s2","staleTime","cacheTime","type2","toLowerCase","console","log","useParallelData","urlArr","_s3","map","obj","i","useGetData","token","_s4","setData","loading","setLoading","error","setError","fetchData","response","err","message","useAutoLogin","_s5","mutationFn","onError","useInfiniteFetch","_s6","result","pageSize","JSON","stringify","filter","pageParam","params","URLSearchParams","append","Object","entries","forEach","key","value","slice","toString","getNextPageParam","lastPage","allPages","dataLength","length","undefined","enabled","refetchOnWindowFocus","useInfiniteFetchCommit","_s7"],"sources":["D:/project/SE-LABS-Website/src/api/custom-hooks.js"],"sourcesContent":["import {\r\n  useQueries,\r\n  useInfiniteQuery,\r\n  // useMutation,\r\n  useQuery,\r\n  useMutation,\r\n} from \"@tanstack/react-query\";\r\nimport { fetchUserDetails, getData, getImgData } from \"./api-method\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getDataDynamic } from \"api/api-method\";\r\n\r\n// import { useState } from \"react\";\r\n//   //map [{url,id},{}] to {id:{data},id:{data}}\r\n//   //using getData each of the obejects in array\r\n//   //and using useQueries\r\nexport const useNormalQueryGet = (url, type, id = \"\") => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${url}-${type}-${id}`],\r\n    queryFn: () => {\r\n      return getData(url);\r\n    },\r\n    onSuccess: (data) => {\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\nexport const useQueryGetImg = (url, type, id) => {\r\n  const results = useQuery({\r\n    queryKey: [`get-${url}-${type}-${id}`],\r\n    staleTime: 1000 * 60, // Data stays fresh for 1 minute\r\n    cacheTime: 1000 * 60 * 5, // Cache remains for 5 minutes\r\n\r\n    queryFn: () => {\r\n      const type2 = type.toLowerCase();\r\n      return getImgData(`${url}/${type2}/image-high?${type2}_id=${id}`);\r\n    },\r\n    // enabled: relatedTopic !== null, // Only run query if data is not null\r\n    onSuccess: (data) => {\r\n      console.log(\"fetched img\", url, type);\r\n      return data;\r\n    },\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const useParallelData = (urlArr) => {\r\n  const results = useQueries(\r\n    urlArr.map((obj, i) => ({\r\n      queryKey: [`${\"get-\" + obj.url + \"-\" + obj.id + \"-\" + i}`],\r\n      queryFn: () => getData(obj.url),\r\n      onSuccess: (data) => {\r\n        console.log(\"fetched par data\", urlArr[1]);\r\n\r\n        return data;\r\n      },\r\n      //   onSettled:\r\n    }))\r\n  );\r\n\r\n  return results;\r\n};\r\n\r\nexport const useGetData = (url, token = null) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        // Call the utility function with or without the token\r\n        const response = await getDataDynamic(\r\n          url,\r\n          token ? `Bearer ${token}` : null\r\n        );\r\n        setData(response);\r\n      } catch (err) {\r\n        setError(err.message || \"Error fetching data\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url, token]);\r\n\r\n  return { data, loading, error };\r\n};\r\nexport const useAutoLogin = () => {\r\n  return useMutation({\r\n    mutationFn: fetchUserDetails, // The function to call\r\n    onSuccess: (data) => {\r\n      console.log(\"Auto login successful:\", data);\r\n    },\r\n    onError: (error) => {\r\n      console.error(\"Error logging in:\", error);\r\n    },\r\n  });\r\n};\r\n// Hook for handling a single infinite fetch query\r\nexport const useInfiniteFetch = (obj) => {\r\n  const result = useInfiniteQuery({\r\n    queryKey: [\r\n      `infinite-${obj.id}-${obj.pageSize}`,\r\n      JSON.stringify(obj.filter),\r\n    ],\r\n    // Include filter in key\r\n    queryFn: ({ pageParam = 1 }) => {\r\n      let url = obj.url;\r\n\r\n      // Handle query params dynamically\r\n      const params = new URLSearchParams();\r\n      params.append(\"page\", pageParam);\r\n      params.append(\"amount\", obj.pageSize);\r\n\r\n      if (obj.filter) {\r\n        Object.entries(obj.filter).forEach(([key, value]) => {\r\n          params.append(key, value);\r\n        });\r\n      }\r\n\r\n      // Append serialized params to the URL\r\n      if (url.slice(-1) === \"?\") {\r\n        url += params.toString();\r\n      } else {\r\n        url += `&${params.toString()}`;\r\n      }\r\n\r\n      console.log(\"Fetching URL:\", url); // Debugging URL\r\n      return getData(url); // Perform the fetch\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      // Adjust based on your API's response structure\r\n      // console.log(\"lastpage=\", lastPage);\r\n      // console.log(\"alloage=\", allPages);\r\n      const dataLength = lastPage?.length || 0;\r\n      if (dataLength < obj.pageSize) {\r\n        // console.log(\"data;ennght\", dataLength);\r\n        // console.log(\"no more page\");\r\n        return undefined;\r\n      } // No more pages\r\n      return allPages.length + 1; // Increment page\r\n    },\r\n    enabled: true, // Ensure it's enabled\r\n    refetchOnWindowFocus: false, // Avoid refetch on tab switch\r\n    onSuccess: (data) => console.log(\"Fetched data:\", data),\r\n    onError: (error) => console.error(\"Error fetching data:\", error),\r\n  });\r\n\r\n  // console.log(\"Infinite Query Result:\", result);\r\n  return result; // Return the infinite query result\r\n};\r\nexport const useInfiniteFetchCommit = (obj) => {\r\n  const result = useInfiniteQuery({\r\n    queryKey: [\r\n      `infiniteCommit-${obj.id}-${obj.pageSize}`,\r\n      JSON.stringify(obj.filter),\r\n    ],\r\n    // Include filter in key\r\n    queryFn: ({ pageParam = 1 }) => {\r\n      let url = obj.url;\r\n      // Handle query params dynamically\r\n      const params = new URLSearchParams();\r\n      params.append(\"page\", pageParam);\r\n      params.append(\"amount\", obj.pageSize);\r\n\r\n      if (obj.filter) {\r\n        Object.entries(obj.filter).forEach(([key, value]) => {\r\n          params.append(key, value);\r\n        });\r\n      }\r\n\r\n      // Append serialized params to the URL\r\n      if (url.slice(-1) === \"?\") {\r\n        url += params.toString();\r\n      } else {\r\n        url += `&${params.toString()}`;\r\n      }\r\n\r\n      console.log(\"Fetching URL:\", url); // Debugging URL\r\n      return getDataDynamic(url, obj.token); // Perform the fetch\r\n    },\r\n    getNextPageParam: (lastPage, allPages) => {\r\n      // Adjust based on your API's response structure\r\n      // console.log(\"lastpage=\", lastPage);\r\n      // console.log(\"alloage=\", allPages);\r\n      const dataLength = lastPage?.length || 0;\r\n      if (dataLength < obj.pageSize) {\r\n        // console.log(\"data;ennght\", dataLength);\r\n        // console.log(\"no more page\");\r\n        return undefined;\r\n      } // No more pages\r\n      return allPages.length + 1; // Increment page\r\n    },\r\n    enabled: true, // Ensure it's enabled\r\n    refetchOnWindowFocus: false, // Avoid refetch on tab switch\r\n    onSuccess: (data) => console.log(\"Fetched data:\", data),\r\n    onError: (error) => console.error(\"Error fetching data:\", error),\r\n  });\r\n\r\n  // console.log(\"Infinite Query Result:\", result);\r\n  return result; // Return the infinite query result\r\n};\r\n\r\n// {\r\n//   data: {\r\n//     pages: [\r\n//       [\r\n//         { id: 1, title: \"Post 1\", body: \"This is post 1 body.\" },\r\n//         { id: 2, title: \"Post 2\", body: \"This is post 2 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ],\r\n//       [\r\n//         { id: 6, title: \"Post 6\", body: \"This is post 6 body.\" },\r\n//         { id: 7, title: \"Post 7\", body: \"This is post 7 body.\" },\r\n//         // 3 more posts here (page size 5)\r\n//       ]\r\n//     ]\r\n//   },\r\n//   isFetchingNextPage: false,\r\n//   hasNextPage: true,\r\n//   fetchNextPage: () => {/* Function to fetch the next page */},\r\n//   isSuccess: true,\r\n//   error: null,\r\n// }\r\n"],"mappings":";;;;;;;AAAA,SACEA,UAAU,EACVC,gBAAgB;AAChB;AACAC,QAAQ,EACRC,WAAW,QACN,uBAAuB;AAC9B,SAASC,gBAAgB,EAAEC,OAAO,EAAEC,UAAU,QAAQ,cAAc;AACpE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,gBAAgB;;AAE/C;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,EAAE,GAAG,EAAE,KAAK;EAAAC,EAAA;EACvD,MAAMC,OAAO,GAAGb,QAAQ,CAAC;IACvBc,QAAQ,EAAE,CAAC,OAAOL,GAAG,IAAIC,IAAI,IAAIC,EAAE,EAAE,CAAC;IACtCI,OAAO,EAAEA,CAAA,KAAM;MACb,OAAOZ,OAAO,CAACM,GAAG,CAAC;IACrB,CAAC;IACDO,SAAS,EAAGC,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAACD,EAAA,CAZWJ,iBAAiB;EAAA,QACZR,QAAQ;AAAA;AAY1B,OAAO,MAAMkB,cAAc,GAAGA,CAACT,GAAG,EAAEC,IAAI,EAAEC,EAAE,KAAK;EAAAQ,GAAA;EAC/C,MAAMN,OAAO,GAAGb,QAAQ,CAAC;IACvBc,QAAQ,EAAE,CAAC,OAAOL,GAAG,IAAIC,IAAI,IAAIC,EAAE,EAAE,CAAC;IACtCS,SAAS,EAAE,IAAI,GAAG,EAAE;IAAE;IACtBC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;IAAE;;IAE1BN,OAAO,EAAEA,CAAA,KAAM;MACb,MAAMO,KAAK,GAAGZ,IAAI,CAACa,WAAW,CAAC,CAAC;MAChC,OAAOnB,UAAU,CAAC,GAAGK,GAAG,IAAIa,KAAK,eAAeA,KAAK,OAAOX,EAAE,EAAE,CAAC;IACnE,CAAC;IACD;IACAK,SAAS,EAAGC,IAAI,IAAK;MACnBO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEhB,GAAG,EAAEC,IAAI,CAAC;MACrC,OAAOO,IAAI;IACb;EACF,CAAC,CAAC;EAEF,OAAOJ,OAAO;AAChB,CAAC;AAACM,GAAA,CAlBWD,cAAc;EAAA,QACTlB,QAAQ;AAAA;AAmB1B,OAAO,MAAM0B,eAAe,GAAIC,MAAM,IAAK;EAAAC,GAAA;EACzC,MAAMf,OAAO,GAAGf,UAAU,CACxB6B,MAAM,CAACE,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,MAAM;IACtBjB,QAAQ,EAAE,CAAC,GAAG,MAAM,GAAGgB,GAAG,CAACrB,GAAG,GAAG,GAAG,GAAGqB,GAAG,CAACnB,EAAE,GAAG,GAAG,GAAGoB,CAAC,EAAE,CAAC;IAC1DhB,OAAO,EAAEA,CAAA,KAAMZ,OAAO,CAAC2B,GAAG,CAACrB,GAAG,CAAC;IAC/BO,SAAS,EAAGC,IAAI,IAAK;MACnBO,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEE,MAAM,CAAC,CAAC,CAAC,CAAC;MAE1C,OAAOV,IAAI;IACb;IACA;EACF,CAAC,CAAC,CACJ,CAAC;EAED,OAAOJ,OAAO;AAChB,CAAC;AAACe,GAAA,CAfWF,eAAe;EAAA,QACV5B,UAAU;AAAA;AAgB5B,OAAO,MAAMkC,UAAU,GAAGA,CAACvB,GAAG,EAAEwB,KAAK,GAAG,IAAI,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACjB,IAAI,EAAEkB,OAAO,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC+B,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiC,KAAK,EAAEC,QAAQ,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMkC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAME,QAAQ,GAAG,MAAMlC,cAAc,CACnCE,GAAG,EACHwB,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,IAC9B,CAAC;QACDE,OAAO,CAACM,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZH,QAAQ,CAACG,GAAG,CAACC,OAAO,IAAI,qBAAqB,CAAC;MAChD,CAAC,SAAS;QACRN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC/B,GAAG,EAAEwB,KAAK,CAAC,CAAC;EAEhB,OAAO;IAAEhB,IAAI;IAAEmB,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACJ,GAAA,CA5BWF,UAAU;AA6BvB,OAAO,MAAMY,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,OAAO5C,WAAW,CAAC;IACjB6C,UAAU,EAAE5C,gBAAgB;IAAE;IAC9Bc,SAAS,EAAGC,IAAI,IAAK;MACnBO,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAER,IAAI,CAAC;IAC7C,CAAC;IACD8B,OAAO,EAAGT,KAAK,IAAK;MAClBd,OAAO,CAACc,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC;AACD;AAAAO,GAAA,CAXaD,YAAY;EAAA,QAChB3C,WAAW;AAAA;AAWpB,OAAO,MAAM+C,gBAAgB,GAAIlB,GAAG,IAAK;EAAAmB,GAAA;EACvC,MAAMC,MAAM,GAAGnD,gBAAgB,CAAC;IAC9Be,QAAQ,EAAE,CACR,YAAYgB,GAAG,CAACnB,EAAE,IAAImB,GAAG,CAACqB,QAAQ,EAAE,EACpCC,IAAI,CAACC,SAAS,CAACvB,GAAG,CAACwB,MAAM,CAAC,CAC3B;IACD;IACAvC,OAAO,EAAEA,CAAC;MAAEwC,SAAS,GAAG;IAAE,CAAC,KAAK;MAC9B,IAAI9C,GAAG,GAAGqB,GAAG,CAACrB,GAAG;;MAEjB;MACA,MAAM+C,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpCD,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;MAChCC,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE5B,GAAG,CAACqB,QAAQ,CAAC;MAErC,IAAIrB,GAAG,CAACwB,MAAM,EAAE;QACdK,MAAM,CAACC,OAAO,CAAC9B,GAAG,CAACwB,MAAM,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;UACnDP,MAAM,CAACE,MAAM,CAACI,GAAG,EAAEC,KAAK,CAAC;QAC3B,CAAC,CAAC;MACJ;;MAEA;MACA,IAAItD,GAAG,CAACuD,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACzBvD,GAAG,IAAI+C,MAAM,CAACS,QAAQ,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLxD,GAAG,IAAI,IAAI+C,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;MAChC;MAEAzC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEhB,GAAG,CAAC,CAAC,CAAC;MACnC,OAAON,OAAO,CAACM,GAAG,CAAC,CAAC,CAAC;IACvB,CAAC;IACDyD,gBAAgB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACxC;MACA;MACA;MACA,MAAMC,UAAU,GAAG,CAAAF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,KAAI,CAAC;MACxC,IAAID,UAAU,GAAGvC,GAAG,CAACqB,QAAQ,EAAE;QAC7B;QACA;QACA,OAAOoB,SAAS;MAClB,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC;IACDE,OAAO,EAAE,IAAI;IAAE;IACfC,oBAAoB,EAAE,KAAK;IAAE;IAC7BzD,SAAS,EAAGC,IAAI,IAAKO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAER,IAAI,CAAC;IACvD8B,OAAO,EAAGT,KAAK,IAAKd,OAAO,CAACc,KAAK,CAAC,sBAAsB,EAAEA,KAAK;EACjE,CAAC,CAAC;;EAEF;EACA,OAAOY,MAAM,CAAC,CAAC;AACjB,CAAC;AAACD,GAAA,CAnDWD,gBAAgB;EAAA,QACZjD,gBAAgB;AAAA;AAmDjC,OAAO,MAAM2E,sBAAsB,GAAI5C,GAAG,IAAK;EAAA6C,GAAA;EAC7C,MAAMzB,MAAM,GAAGnD,gBAAgB,CAAC;IAC9Be,QAAQ,EAAE,CACR,kBAAkBgB,GAAG,CAACnB,EAAE,IAAImB,GAAG,CAACqB,QAAQ,EAAE,EAC1CC,IAAI,CAACC,SAAS,CAACvB,GAAG,CAACwB,MAAM,CAAC,CAC3B;IACD;IACAvC,OAAO,EAAEA,CAAC;MAAEwC,SAAS,GAAG;IAAE,CAAC,KAAK;MAC9B,IAAI9C,GAAG,GAAGqB,GAAG,CAACrB,GAAG;MACjB;MACA,MAAM+C,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpCD,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,CAAC;MAChCC,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE5B,GAAG,CAACqB,QAAQ,CAAC;MAErC,IAAIrB,GAAG,CAACwB,MAAM,EAAE;QACdK,MAAM,CAACC,OAAO,CAAC9B,GAAG,CAACwB,MAAM,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;UACnDP,MAAM,CAACE,MAAM,CAACI,GAAG,EAAEC,KAAK,CAAC;QAC3B,CAAC,CAAC;MACJ;;MAEA;MACA,IAAItD,GAAG,CAACuD,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACzBvD,GAAG,IAAI+C,MAAM,CAACS,QAAQ,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLxD,GAAG,IAAI,IAAI+C,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;MAChC;MAEAzC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEhB,GAAG,CAAC,CAAC,CAAC;MACnC,OAAOF,cAAc,CAACE,GAAG,EAAEqB,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;IACzC,CAAC;IACDiC,gBAAgB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACxC;MACA;MACA;MACA,MAAMC,UAAU,GAAG,CAAAF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,KAAI,CAAC;MACxC,IAAID,UAAU,GAAGvC,GAAG,CAACqB,QAAQ,EAAE;QAC7B;QACA;QACA,OAAOoB,SAAS;MAClB,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC;IACDE,OAAO,EAAE,IAAI;IAAE;IACfC,oBAAoB,EAAE,KAAK;IAAE;IAC7BzD,SAAS,EAAGC,IAAI,IAAKO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAER,IAAI,CAAC;IACvD8B,OAAO,EAAGT,KAAK,IAAKd,OAAO,CAACc,KAAK,CAAC,sBAAsB,EAAEA,KAAK;EACjE,CAAC,CAAC;;EAEF;EACA,OAAOY,MAAM,CAAC,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAyB,GAAA,CAxEaD,sBAAsB;EAAA,QAClB3E,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}