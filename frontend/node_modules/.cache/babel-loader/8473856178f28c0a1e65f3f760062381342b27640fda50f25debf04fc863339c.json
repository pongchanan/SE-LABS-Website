{"ast":null,"code":"// src/redux/modalSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isOpen: false,\n  selectedImage: null,\n  // bodyText: \"\",\n  isCreate: null,\n  isPreview: false,\n  currentFormData: null,\n  openedDropdown: null,\n  savedFormDataArr: [],\n  stackedFormDataArr: [],\n  createTopic: null\n  //currentPath in main-Slice use also here\n};\nconst editSlice = createSlice({\n  name: \"edit\",\n  initialState,\n  reducers: {\n    openModal: state => {\n      state.isOpen = true;\n    },\n    closeModal: state => {\n      state.isOpen = false;\n    },\n    creating: state => {\n      state.isCreate = true;\n    },\n    editing: state => {\n      state.isCreate = false;\n    },\n    setImage: (state, action) => {\n      state.selectedImage = action.payload;\n    },\n    clearImage: state => {\n      state.selectedImage = null;\n    },\n    currentDropdown: (state, action) => {\n      state.openedDropdown = action.payload;\n    },\n    //   clearEditState:(state)=>{\n\n    //     isOpen: false,\n    // selectedImage: null,\n    // // bodyText: \"\",\n    // isCreate: null,\n    // isPreview: false,\n    // currentFormData: null,\n    // openedDropdown: null,\n    //   },\n    //   resetEditState: (state) =>{  openedDropdown: null,  selectedImage: null,\n\n    //   },\n\n    closeStackedArr: state => {\n      const lastIndex = state.stackedFormDataArr.length - 1;\n      if (lastIndex >= 0) {\n        state.stackedFormDataArr[lastIndex] -= 1;\n      }\n    },\n    openNewStack: (state, action) => {\n      state.stackedFormDataArr = [...state.stackedFormDataArr, action.payload];\n    },\n    setCreateTopic: (state, action) => {\n      state.createTopic = action.payload;\n    }\n  }\n});\nexport const editAction = editSlice.actions;\nexport default editSlice;","map":{"version":3,"names":["createSlice","initialState","isOpen","selectedImage","isCreate","isPreview","currentFormData","openedDropdown","savedFormDataArr","stackedFormDataArr","createTopic","editSlice","name","reducers","openModal","state","closeModal","creating","editing","setImage","action","payload","clearImage","currentDropdown","closeStackedArr","lastIndex","length","openNewStack","setCreateTopic","editAction","actions"],"sources":["D:/project/SE-LABS-Website/src/store/edit-slice.js"],"sourcesContent":["// src/redux/modalSlice.js\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isOpen: false,\r\n  selectedImage: null,\r\n  // bodyText: \"\",\r\n  isCreate: null,\r\n  isPreview: false,\r\n  currentFormData: null,\r\n  openedDropdown: null,\r\n  savedFormDataArr: [],\r\n  stackedFormDataArr: [],\r\n  createTopic: null,\r\n  //currentPath in main-Slice use also here\r\n};\r\n\r\nconst editSlice = createSlice({\r\n  name: \"edit\",\r\n  initialState,\r\n  reducers: {\r\n    openModal: (state) => {\r\n      state.isOpen = true;\r\n    },\r\n    closeModal: (state) => {\r\n      state.isOpen = false;\r\n    },\r\n    creating: (state) => {\r\n      state.isCreate = true;\r\n    },\r\n    editing: (state) => {\r\n      state.isCreate = false;\r\n    },\r\n\r\n    setImage: (state, action) => {\r\n      state.selectedImage = action.payload;\r\n    },\r\n    clearImage: (state) => {\r\n      state.selectedImage = null;\r\n    },\r\n    currentDropdown: (state, action) => {\r\n      state.openedDropdown = action.payload;\r\n    },\r\n    //   clearEditState:(state)=>{\r\n\r\n    //     isOpen: false,\r\n    // selectedImage: null,\r\n    // // bodyText: \"\",\r\n    // isCreate: null,\r\n    // isPreview: false,\r\n    // currentFormData: null,\r\n    // openedDropdown: null,\r\n    //   },\r\n    //   resetEditState: (state) =>{  openedDropdown: null,  selectedImage: null,\r\n\r\n    //   },\r\n\r\n    closeStackedArr: (state) => {\r\n      const lastIndex = state.stackedFormDataArr.length - 1;\r\n      if (lastIndex >= 0) {\r\n        state.stackedFormDataArr[lastIndex] -= 1;\r\n      }\r\n    },\r\n    openNewStack: (state, action) => {\r\n      state.stackedFormDataArr = [...state.stackedFormDataArr, action.payload];\r\n    },\r\n    setCreateTopic: (state, action) => {\r\n      state.createTopic = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const editAction = editSlice.actions;\r\nexport default editSlice;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,KAAK;EACbC,aAAa,EAAE,IAAI;EACnB;EACAC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,KAAK;EAChBC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE,IAAI;EACpBC,gBAAgB,EAAE,EAAE;EACpBC,kBAAkB,EAAE,EAAE;EACtBC,WAAW,EAAE;EACb;AACF,CAAC;AAED,MAAMC,SAAS,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,MAAM;EACZX,YAAY;EACZY,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACb,MAAM,GAAG,IAAI;IACrB,CAAC;IACDc,UAAU,EAAGD,KAAK,IAAK;MACrBA,KAAK,CAACb,MAAM,GAAG,KAAK;IACtB,CAAC;IACDe,QAAQ,EAAGF,KAAK,IAAK;MACnBA,KAAK,CAACX,QAAQ,GAAG,IAAI;IACvB,CAAC;IACDc,OAAO,EAAGH,KAAK,IAAK;MAClBA,KAAK,CAACX,QAAQ,GAAG,KAAK;IACxB,CAAC;IAEDe,QAAQ,EAAEA,CAACJ,KAAK,EAAEK,MAAM,KAAK;MAC3BL,KAAK,CAACZ,aAAa,GAAGiB,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,UAAU,EAAGP,KAAK,IAAK;MACrBA,KAAK,CAACZ,aAAa,GAAG,IAAI;IAC5B,CAAC;IACDoB,eAAe,EAAEA,CAACR,KAAK,EAAEK,MAAM,KAAK;MAClCL,KAAK,CAACR,cAAc,GAAGa,MAAM,CAACC,OAAO;IACvC,CAAC;IACD;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEAG,eAAe,EAAGT,KAAK,IAAK;MAC1B,MAAMU,SAAS,GAAGV,KAAK,CAACN,kBAAkB,CAACiB,MAAM,GAAG,CAAC;MACrD,IAAID,SAAS,IAAI,CAAC,EAAE;QAClBV,KAAK,CAACN,kBAAkB,CAACgB,SAAS,CAAC,IAAI,CAAC;MAC1C;IACF,CAAC;IACDE,YAAY,EAAEA,CAACZ,KAAK,EAAEK,MAAM,KAAK;MAC/BL,KAAK,CAACN,kBAAkB,GAAG,CAAC,GAAGM,KAAK,CAACN,kBAAkB,EAAEW,MAAM,CAACC,OAAO,CAAC;IAC1E,CAAC;IACDO,cAAc,EAAEA,CAACb,KAAK,EAAEK,MAAM,KAAK;MACjCL,KAAK,CAACL,WAAW,GAAGU,MAAM,CAACC,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMQ,UAAU,GAAGlB,SAAS,CAACmB,OAAO;AAC3C,eAAenB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}